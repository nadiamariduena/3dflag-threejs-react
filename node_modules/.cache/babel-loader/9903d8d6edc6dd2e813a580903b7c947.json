{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/dci-st119/Documents/all-Desktop/REACT-YOUTUBE-TUTOR/FLAG-THREEJS/src/App.js\";\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as THREE from \"three\"; //\n//\n\nclass App extends Component {\n  //\n  //\n  componentDidMount() {\n    //\n    const section = document.querySelector(\"section.flag\"); //\n\n    var scene = new THREE.Scene();\n    var camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000); //\n\n    var renderer = new THREE.WebGLRenderer({\n      // 7 adding the alpha transparency\n      alpha: true,\n      antialias: true //8 this will smooth the edges of the cube\n\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight); // document.body.appendChild( renderer.domElement );\n    // use ref as a mount point of the Three.js scene instead of the document.body\n\n    section.appendChild(renderer.domElement); //\n    //\n\n    const loader = new THREE.TextureLoader(); //\n\n    const geometry = new THREE.PlaneGeometry(5, 3, 50, 30); //\n    //\n\n    var material = new THREE.MeshBasicMaterial({\n      color: 0x00ff00\n    });\n    var cube = new THREE.Mesh(geometry, material);\n    scene.add(cube);\n    camera.position.z = 5;\n\n    var animate = function () {\n      requestAnimationFrame(animate);\n      cube.rotation.x += 0.01;\n      cube.rotation.y += 0.01;\n      renderer.render(scene, camera);\n    };\n\n    animate();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      ref: ref => this.mount = ref,\n      className: \"flag\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 12\n    }, this);\n  }\n\n} //\n\n\nexport default App;","map":{"version":3,"sources":["/home/dci-st119/Documents/all-Desktop/REACT-YOUTUBE-TUTOR/FLAG-THREEJS/src/App.js"],"names":["React","Component","ReactDOM","THREE","App","componentDidMount","section","document","querySelector","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","renderer","WebGLRenderer","alpha","antialias","setSize","appendChild","domElement","loader","TextureLoader","geometry","PlaneGeometry","material","MeshBasicMaterial","color","cube","Mesh","add","position","z","animate","requestAnimationFrame","rotation","x","y","render","ref","mount"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB,C,CACA;AACA;;AACA,MAAMC,GAAN,SAAkBH,SAAlB,CAA4B;AAC1B;AACA;AACAI,EAAAA,iBAAiB,GAAG;AAClB;AACA,UAAMC,OAAO,GAAGC,QAAQ,CAACC,aAAT,CAAuB,cAAvB,CAAhB,CAFkB,CAIlB;;AACA,QAAIC,KAAK,GAAG,IAAIN,KAAK,CAACO,KAAV,EAAZ;AACA,QAAIC,MAAM,GAAG,IAAIR,KAAK,CAACS,iBAAV,CACX,EADW,EAEXC,MAAM,CAACC,UAAP,GAAoBD,MAAM,CAACE,WAFhB,EAGX,GAHW,EAIX,IAJW,CAAb,CANkB,CAYlB;;AACA,QAAIC,QAAQ,GAAG,IAAIb,KAAK,CAACc,aAAV,CAAwB;AACrC;AACAC,MAAAA,KAAK,EAAE,IAF8B;AAGrCC,MAAAA,SAAS,EAAE,IAH0B,CAGpB;;AAHoB,KAAxB,CAAf;AAKAH,IAAAA,QAAQ,CAACI,OAAT,CAAiBP,MAAM,CAACC,UAAxB,EAAoCD,MAAM,CAACE,WAA3C,EAlBkB,CAmBlB;AACA;;AACAT,IAAAA,OAAO,CAACe,WAAR,CAAoBL,QAAQ,CAACM,UAA7B,EArBkB,CAsBlB;AACA;;AACA,UAAMC,MAAM,GAAG,IAAIpB,KAAK,CAACqB,aAAV,EAAf,CAxBkB,CAyBlB;;AACA,UAAMC,QAAQ,GAAG,IAAItB,KAAK,CAACuB,aAAV,CAAwB,CAAxB,EAA2B,CAA3B,EAA8B,EAA9B,EAAkC,EAAlC,CAAjB,CA1BkB,CA2BlB;AACA;;AACA,QAAIC,QAAQ,GAAG,IAAIxB,KAAK,CAACyB,iBAAV,CAA4B;AACzCC,MAAAA,KAAK,EAAE;AADkC,KAA5B,CAAf;AAGA,QAAIC,IAAI,GAAG,IAAI3B,KAAK,CAAC4B,IAAV,CAAeN,QAAf,EAAyBE,QAAzB,CAAX;AACAlB,IAAAA,KAAK,CAACuB,GAAN,CAAUF,IAAV;AACAnB,IAAAA,MAAM,CAACsB,QAAP,CAAgBC,CAAhB,GAAoB,CAApB;;AACA,QAAIC,OAAO,GAAG,YAAY;AACxBC,MAAAA,qBAAqB,CAACD,OAAD,CAArB;AACAL,MAAAA,IAAI,CAACO,QAAL,CAAcC,CAAd,IAAmB,IAAnB;AACAR,MAAAA,IAAI,CAACO,QAAL,CAAcE,CAAd,IAAmB,IAAnB;AACAvB,MAAAA,QAAQ,CAACwB,MAAT,CAAgB/B,KAAhB,EAAuBE,MAAvB;AACD,KALD;;AAMAwB,IAAAA,OAAO;AACR;;AACDK,EAAAA,MAAM,GAAG;AACP,wBAAO;AAAS,MAAA,GAAG,EAAGC,GAAD,IAAU,KAAKC,KAAL,GAAaD,GAArC;AAA2C,MAAA,SAAS,EAAC;AAArD;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AAhDyB,C,CAmD5B;;;AACA,eAAerC,GAAf","sourcesContent":["import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as THREE from \"three\";\n//\n//\nclass App extends Component {\n  //\n  //\n  componentDidMount() {\n    //\n    const section = document.querySelector(\"section.flag\");\n\n    //\n    var scene = new THREE.Scene();\n    var camera = new THREE.PerspectiveCamera(\n      75,\n      window.innerWidth / window.innerHeight,\n      0.1,\n      1000\n    );\n    //\n    var renderer = new THREE.WebGLRenderer({\n      // 7 adding the alpha transparency\n      alpha: true,\n      antialias: true, //8 this will smooth the edges of the cube\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    // document.body.appendChild( renderer.domElement );\n    // use ref as a mount point of the Three.js scene instead of the document.body\n    section.appendChild(renderer.domElement);\n    //\n    //\n    const loader = new THREE.TextureLoader();\n    //\n    const geometry = new THREE.PlaneGeometry(5, 3, 50, 30);\n    //\n    //\n    var material = new THREE.MeshBasicMaterial({\n      color: 0x00ff00,\n    });\n    var cube = new THREE.Mesh(geometry, material);\n    scene.add(cube);\n    camera.position.z = 5;\n    var animate = function () {\n      requestAnimationFrame(animate);\n      cube.rotation.x += 0.01;\n      cube.rotation.y += 0.01;\n      renderer.render(scene, camera);\n    };\n    animate();\n  }\n  render() {\n    return <section ref={(ref) => (this.mount = ref)} className=\"flag\" />;\n  }\n}\n\n//\nexport default App;\n"]},"metadata":{},"sourceType":"module"}