{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/dci-st119/Documents/all-Desktop/REACT-YOUTUBE-TUTOR/FLAG-THREEJS/src/App.js\";\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as THREE from \"three\"; //\n//\n\nclass App extends Component {\n  //\n  //\n  componentDidMount() {\n    //\n    const section = document.querySelector(\"section.flag\"); //\n\n    var scene = new THREE.Scene();\n    var camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000); //\n\n    var renderer = new THREE.WebGLRenderer({\n      // 7 adding the alpha transparency\n      alpha: true,\n      antialias: true //8 this will smooth the edges of the cube\n\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight); // document.body.appendChild( renderer.domElement );\n    // use ref as a mount point of the Three.js scene instead of the document.body\n\n    section.appendChild(renderer.domElement); //\n    //\n\n    const loader = new THREE.TextureLoader(); //\n\n    const geometry = new THREE.PlaneGeometry(5, 3, 50, 30); // it will increase the segments in the geometry\n    //\n    //\n\n    var material = new THREE.MeshBasicMaterial({\n      color: 0x00ff00\n    }); //\n    //\n    //\n    //\n\n    var cube = new THREE.Mesh(geometry, material);\n    scene.add(cube); //\n    //\n    // new rotation\n\n    cube.rotation.set(-0.1, 0, 0); // x direction y direction and z\n    //\n    // this will increase the flag, actually is like zooming, the less the bigger\n\n    camera.position.z = 4; //\n    //\n    //by default its not doing anything\n    // its going to wave the flag smoothly\n\n    const clock = new THREE.Clock(); //\n    //\n\n    function animate() {\n      const t_timeClock = clock.getElapsedTime(); //\n      // With the vertices we are going to grab all the points /vertices withing the cube/flag\n      // We are going to move them in a sine \"curve\"\n      // the map is going to make something for every single point, so each point is going to do a partcular thing, moving up down etc\n\n      cube.geometry.vertices.map(dots_vertices => {\n        const waveX1 = 0.1 * Math.sin(dots_vertices.x * 2 + t_timeClock); // 2.5 will make the wave huge and very close to the user, 0.5 is flat , 0.1 even more flattened\n        // second wave\n\n        const waveX2 = 0.5 * Math.sin(dots_vertices.x * 2 + t_timeClock * 2); // 3 wave but in the Y direction\n\n        const waveY1 = 0.1 * Math.sin(dots_vertices.y * 6 + t_timeClock * 0.1); //to slowdown the time t_timeClock * 0.5);\n        //\n        //\n\n        dots_vertices.z = waveX1 + waveX2 + waveY1;\n      }); //\n      // // its going to wave the flag smoothly\n\n      cube.geometry.verticesNeedUpdate = true; //\n\n      requestAnimationFrame(animate);\n      renderer.render(scene, camera);\n    } //\n    //\n\n\n    animate(); //\n    //\n    //\n    //\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      ref: ref => this.mount = ref,\n      className: \"flag\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 12\n    }, this);\n  }\n\n} //\n\n\nexport default App;","map":{"version":3,"sources":["/home/dci-st119/Documents/all-Desktop/REACT-YOUTUBE-TUTOR/FLAG-THREEJS/src/App.js"],"names":["React","Component","ReactDOM","THREE","App","componentDidMount","section","document","querySelector","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","renderer","WebGLRenderer","alpha","antialias","setSize","appendChild","domElement","loader","TextureLoader","geometry","PlaneGeometry","material","MeshBasicMaterial","color","cube","Mesh","add","rotation","set","position","z","clock","Clock","animate","t_timeClock","getElapsedTime","vertices","map","dots_vertices","waveX1","Math","sin","x","waveX2","waveY1","y","verticesNeedUpdate","requestAnimationFrame","render","ref","mount"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB,C,CACA;AACA;;AACA,MAAMC,GAAN,SAAkBH,SAAlB,CAA4B;AAC1B;AACA;AACAI,EAAAA,iBAAiB,GAAG;AAClB;AACA,UAAMC,OAAO,GAAGC,QAAQ,CAACC,aAAT,CAAuB,cAAvB,CAAhB,CAFkB,CAIlB;;AACA,QAAIC,KAAK,GAAG,IAAIN,KAAK,CAACO,KAAV,EAAZ;AACA,QAAIC,MAAM,GAAG,IAAIR,KAAK,CAACS,iBAAV,CACX,EADW,EAEXC,MAAM,CAACC,UAAP,GAAoBD,MAAM,CAACE,WAFhB,EAGX,GAHW,EAIX,IAJW,CAAb,CANkB,CAYlB;;AACA,QAAIC,QAAQ,GAAG,IAAIb,KAAK,CAACc,aAAV,CAAwB;AACrC;AACAC,MAAAA,KAAK,EAAE,IAF8B;AAGrCC,MAAAA,SAAS,EAAE,IAH0B,CAGpB;;AAHoB,KAAxB,CAAf;AAKAH,IAAAA,QAAQ,CAACI,OAAT,CAAiBP,MAAM,CAACC,UAAxB,EAAoCD,MAAM,CAACE,WAA3C,EAlBkB,CAmBlB;AACA;;AACAT,IAAAA,OAAO,CAACe,WAAR,CAAoBL,QAAQ,CAACM,UAA7B,EArBkB,CAsBlB;AACA;;AACA,UAAMC,MAAM,GAAG,IAAIpB,KAAK,CAACqB,aAAV,EAAf,CAxBkB,CAyBlB;;AACA,UAAMC,QAAQ,GAAG,IAAItB,KAAK,CAACuB,aAAV,CAAwB,CAAxB,EAA2B,CAA3B,EAA8B,EAA9B,EAAkC,EAAlC,CAAjB,CA1BkB,CA2BlB;AACA;AACA;;AACA,QAAIC,QAAQ,GAAG,IAAIxB,KAAK,CAACyB,iBAAV,CAA4B;AACzCC,MAAAA,KAAK,EAAE;AADkC,KAA5B,CAAf,CA9BkB,CAiClB;AACA;AACA;AACA;;AACA,QAAIC,IAAI,GAAG,IAAI3B,KAAK,CAAC4B,IAAV,CAAeN,QAAf,EAAyBE,QAAzB,CAAX;AACAlB,IAAAA,KAAK,CAACuB,GAAN,CAAUF,IAAV,EAtCkB,CAuClB;AACA;AACA;;AACAA,IAAAA,IAAI,CAACG,QAAL,CAAcC,GAAd,CAAkB,CAAC,GAAnB,EAAwB,CAAxB,EAA2B,CAA3B,EA1CkB,CA2ClB;AACA;AACA;;AACAvB,IAAAA,MAAM,CAACwB,QAAP,CAAgBC,CAAhB,GAAoB,CAApB,CA9CkB,CA+ClB;AACA;AACA;AACA;;AACA,UAAMC,KAAK,GAAG,IAAIlC,KAAK,CAACmC,KAAV,EAAd,CAnDkB,CAoDlB;AACA;;AACA,aAASC,OAAT,GAAmB;AACjB,YAAMC,WAAW,GAAGH,KAAK,CAACI,cAAN,EAApB,CADiB,CAEjB;AACA;AACA;AACA;;AACAX,MAAAA,IAAI,CAACL,QAAL,CAAciB,QAAd,CAAuBC,GAAvB,CAA4BC,aAAD,IAAmB;AAC5C,cAAMC,MAAM,GAAG,MAAMC,IAAI,CAACC,GAAL,CAASH,aAAa,CAACI,CAAd,GAAkB,CAAlB,GAAsBR,WAA/B,CAArB,CAD4C,CAE5C;AACA;;AACA,cAAMS,MAAM,GAAG,MAAMH,IAAI,CAACC,GAAL,CAASH,aAAa,CAACI,CAAd,GAAkB,CAAlB,GAAsBR,WAAW,GAAG,CAA7C,CAArB,CAJ4C,CAK5C;;AACA,cAAMU,MAAM,GAAG,MAAMJ,IAAI,CAACC,GAAL,CAASH,aAAa,CAACO,CAAd,GAAkB,CAAlB,GAAsBX,WAAW,GAAG,GAA7C,CAArB,CAN4C,CAM4B;AACxE;AACA;;AACAI,QAAAA,aAAa,CAACR,CAAd,GAAkBS,MAAM,GAAGI,MAAT,GAAkBC,MAApC;AACD,OAVD,EANiB,CAkBjB;AACA;;AACApB,MAAAA,IAAI,CAACL,QAAL,CAAc2B,kBAAd,GAAmC,IAAnC,CApBiB,CAqBjB;;AACAC,MAAAA,qBAAqB,CAACd,OAAD,CAArB;AACAvB,MAAAA,QAAQ,CAACsC,MAAT,CAAgB7C,KAAhB,EAAuBE,MAAvB;AACD,KA9EiB,CA+ElB;AACA;;;AACA4B,IAAAA,OAAO,GAjFW,CAkFlB;AACA;AACA;AACA;AACD;;AACDe,EAAAA,MAAM,GAAG;AACP,wBAAO;AAAS,MAAA,GAAG,EAAGC,GAAD,IAAU,KAAKC,KAAL,GAAaD,GAArC;AAA2C,MAAA,SAAS,EAAC;AAArD;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AA5FyB,C,CA+F5B;;;AACA,eAAenD,GAAf","sourcesContent":["import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as THREE from \"three\";\n//\n//\nclass App extends Component {\n  //\n  //\n  componentDidMount() {\n    //\n    const section = document.querySelector(\"section.flag\");\n\n    //\n    var scene = new THREE.Scene();\n    var camera = new THREE.PerspectiveCamera(\n      75,\n      window.innerWidth / window.innerHeight,\n      0.1,\n      1000\n    );\n    //\n    var renderer = new THREE.WebGLRenderer({\n      // 7 adding the alpha transparency\n      alpha: true,\n      antialias: true, //8 this will smooth the edges of the cube\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    // document.body.appendChild( renderer.domElement );\n    // use ref as a mount point of the Three.js scene instead of the document.body\n    section.appendChild(renderer.domElement);\n    //\n    //\n    const loader = new THREE.TextureLoader();\n    //\n    const geometry = new THREE.PlaneGeometry(5, 3, 50, 30);\n    // it will increase the segments in the geometry\n    //\n    //\n    var material = new THREE.MeshBasicMaterial({\n      color: 0x00ff00,\n    });\n    //\n    //\n    //\n    //\n    var cube = new THREE.Mesh(geometry, material);\n    scene.add(cube);\n    //\n    //\n    // new rotation\n    cube.rotation.set(-0.1, 0, 0);\n    // x direction y direction and z\n    //\n    // this will increase the flag, actually is like zooming, the less the bigger\n    camera.position.z = 4;\n    //\n    //\n    //by default its not doing anything\n    // its going to wave the flag smoothly\n    const clock = new THREE.Clock();\n    //\n    //\n    function animate() {\n      const t_timeClock = clock.getElapsedTime();\n      //\n      // With the vertices we are going to grab all the points /vertices withing the cube/flag\n      // We are going to move them in a sine \"curve\"\n      // the map is going to make something for every single point, so each point is going to do a partcular thing, moving up down etc\n      cube.geometry.vertices.map((dots_vertices) => {\n        const waveX1 = 0.1 * Math.sin(dots_vertices.x * 2 + t_timeClock);\n        // 2.5 will make the wave huge and very close to the user, 0.5 is flat , 0.1 even more flattened\n        // second wave\n        const waveX2 = 0.5 * Math.sin(dots_vertices.x * 2 + t_timeClock * 2);\n        // 3 wave but in the Y direction\n        const waveY1 = 0.1 * Math.sin(dots_vertices.y * 6 + t_timeClock * 0.1); //to slowdown the time t_timeClock * 0.5);\n        //\n        //\n        dots_vertices.z = waveX1 + waveX2 + waveY1;\n      });\n\n      //\n      // // its going to wave the flag smoothly\n      cube.geometry.verticesNeedUpdate = true;\n      //\n      requestAnimationFrame(animate);\n      renderer.render(scene, camera);\n    }\n    //\n    //\n    animate();\n    //\n    //\n    //\n    //\n  }\n  render() {\n    return <section ref={(ref) => (this.mount = ref)} className=\"flag\" />;\n  }\n}\n\n//\nexport default App;\n"]},"metadata":{},"sourceType":"module"}